* Preferences
#+begin_src emacs-lisp
  (setq-default
   auto-save-list-file-prefix nil      ; Prevent tracking for auto-saves
   make-backup-files          nil
   auto-save-default          nil
   create-lockfiles           nil
   help-window-select         t        ; Focus new help windows when opened
   delete-by-moving-to-trash  t        ; Delete files to Trash ($HOME/.local/share/Trash)
   uniquify-buffer-name-style 'forward ; Uniquify buffer names
   sentence-end-double-space  nil      ; Use a single space after dots
   mouse-yank-at-point        t        ; Yank at point rather than pointer
   x-select-enable-clipboard  t        ; After copying in X11, paste by `yank'
   x-select-enable-primary    t        ; After mouse highlighting in X11, paste by `yank'
   )

  (when window-system (global-hl-line-mode 1))
  (when window-system (global-prettify-symbols-mode 1))
  (fset 'yes-or-no-p 'y-or-n-p)        ; Replace yes/no prompts with y/n

  (recentf-mode            1)
  (save-place-mode         1)          ; Remember and restore the last cursor position of opened files.
  (show-paren-mode         1)
  (line-number-mode        1)
  (column-number-mode      1)
  (electric-pair-mode      1)
  (global-subword-mode     1)          ; Iterate through CamelCase words.
  (delete-selection-mode   1)          ; Replace highlighted region when inserting text.
  (global-auto-revert-mode 1)          ; Revert buffers when the underlying file has changed.

  ;; Save what you enter into minibuffer prompts.
  (setq history-length 25)
  (savehist-mode 1)

  ;; Run at full power please.
  (put 'upcase-region             'disabled nil)
  (put 'downcase-region           'disabled nil)
  (put 'narrow-to-region          'disabled nil)
  (put 'narrow-to-page            'disabled nil)
  (put 'erase-buffer              'disabled nil)
  (put 'scroll-left               'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

  (setq-default
   scroll-conservatively 10)
#+end_src

* Org-mode
** Config
#+begin_src emacs-lisp
  (setq
   org-startup-folded      t
   org-src-window-setup    'current-window
   org-hide-leading-stars  t

   ;; Org Link
   org-return-follows-link t
   )
#+end_src

* Appearence
** all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
#+end_src

** doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

* Theme
** doom-themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;(doom-themes-neotree-config)
    ;; or for treemacs users
    ;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    ;(doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

* Visualize
** rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))

  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+end_src

** goggles
#+begin_src emacs-lisp
  (use-package goggles
    :ensure t
    :hook ((prog-mode text-mode) . goggles-mode)
    :config
    (setq-default goggles-pulse t)) ;; set to nil to disable pulsing
#+end_src

* File Manager
** DIRED
#+begin_src emacs-lisp
  (setq
   dired-recursive-copies 'always
   dired-recursive-deletes 'always
   dired-kill-when-opening-new-dired-buffer t
   dired-listing-switches "-lAh --group-directories-first"
   dired-dwim-target t
   )

  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
#+end_src

* Minibuffer
** vertico, savehist, orderless, & marginalia
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :ensure t
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :ensure t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))

  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    :ensure t
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
	   :map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

* Navigation
** avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t)

  (global-set-key (kbd "C-:") 'avy-goto-char)
  (global-set-key (kbd "C-'") 'avy-goto-char-2)
  (global-set-key (kbd "C-c C-z") 'avy-goto-char-timer)
  (global-set-key (kbd "M-g f") 'avy-goto-line)
#+end_src

* Window & Frame Management
** custom functions
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

** switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "r" "s" "t" "g" "m" "n" "e" "i" "o"))
    :bind
    ([remap other-window] . switch-window))
#+end_src

* Buffer
** custom functions
#+begin_src emacs-lisp
  ;; Always murder current buffer.
  ;; Doing C-x k should kill the current buffer at all times,
  ;; we have ibuffer for more sophisticated thing.
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)

  ;; Kill buffers without asking for confirmation
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))

  ;; Turn switch-to-buffer into ibuffer
  (global-set-key (kbd "C-x b") 'ibuffer)

  ;; If you feel like you know how ibuffer works and need not to be asked for
  ;; confirmation after every serious command, enable this as follows.
  (setq ibuffer-expert t)

  ;; close-all-buffers
  (defun close-all-buffers ()
    "Kill all buffers without regard for their origin."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+end_src

* Editing
** custom functions
#+begin_src emacs-lisp
  ;; Kill word
  (defun daedreth/kill-inner-word ()
    "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
    (interactive)
    (forward-char 1)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c c w") 'daedreth/kill-inner-word)

  ;; copy word
  (defun daedreth/copy-whole-word ()
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (kill-word 1)
      (yank)))
  (global-set-key (kbd "C-c y w") 'daedreth/copy-whole-word)

  ;; copy a line
  (defun daedreth/copy-whole-line ()
    "Copies a line without regard for cursor position."
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c y y") 'daedreth/copy-whole-line)

  ;; kill a line
  (global-set-key (kbd "C-c d d") 'kill-whole-line)
#+end_src

** kill-ring
*** popup-killring
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))

  (setq kill-ring-max 100)
#+end_src

* Version Control
** magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("C-c m" . magit-status))
#+end_src
